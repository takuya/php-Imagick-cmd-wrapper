<?php

namespace SystemUtil\AutoGeneratedTraits;

/**
 * Auto generated From command help
 */
trait MontageGenerated
{
	/**
	 * join images into a single multi-image file
	 */
	public function adjoin()
	{
		return $this->addOpt('-adjoin');
	}


	/**
	 * affine transform matrix
	 * @param $matrix
	 */
	public function affine($matrix)
	{
		return $this->addOpt('-affine', $matrix );
	}


	/**
	 * on
	 * @param $option
	 */
	public function alpha($option)
	{
		return $this->addOpt('-alpha', $option );
	}


	/**
	 * decipher image with this password
	 * @param $password
	 */
	public function authenticate($password)
	{
		return $this->addOpt('-authenticate', $password );
	}


	/**
	 * chromaticity blue primary point
	 * @param $point
	 */
	public function bluePrimary($point)
	{
		return $this->addOpt('-blue-primary', $point );
	}


	/**
	 * border color
	 * @param $color
	 */
	public function bordercolor($color)
	{
		return $this->addOpt('-bordercolor', $color );
	}


	/**
	 * assign a caption to an image
	 * @param $string
	 */
	public function caption($string)
	{
		return $this->addOpt('-caption', $string );
	}


	/**
	 * apply option to select image channels
	 * @param $type
	 */
	public function channel($type)
	{
		return $this->addOpt('-channel', $type );
	}


	/**
	 * preferred number of colors in the image
	 * @param $value
	 */
	public function colors($value)
	{
		return $this->addOpt('-colors', $value );
	}


	/**
	 * alternate image colorsapce
	 * @param $type
	 */
	public function colorspace($type)
	{
		return $this->addOpt('-colorspace', $type );
	}


	/**
	 * annotate image with comment
	 * @param $string
	 */
	public function comment($string)
	{
		return $this->addOpt('-comment', $string );
	}


	/**
	 * composite operator
	 * @param $operator
	 */
	public function compose($operator)
	{
		return $this->addOpt('-compose', $operator );
	}


	/**
	 * type of pixel compression when writing the image
	 * @param $type
	 */
	public function compress($type)
	{
		return $this->addOpt('-compress', $type );
	}


	/**
	 * @param $format
	 */
	public function define($format)
	{
		return $this->addOpt('-define', $format );
	}


	/**
	 * horizontal and vertical density of the image
	 * @param $geometry
	 */
	public function density($geometry)
	{
		return $this->addOpt('-density', $geometry );
	}


	/**
	 * image depth
	 * @param $value
	 */
	public function depth($value)
	{
		return $this->addOpt('-depth', $value );
	}


	/**
	 * query font from this X server
	 * @param $server
	 */
	public function display($server)
	{
		return $this->addOpt('-display', $server );
	}


	/**
	 * layer disposal method
	 * @param $method
	 */
	public function dispose($method)
	{
		return $this->addOpt('-dispose', $method );
	}


	/**
	 * apply error diffusion to image
	 * @param $method
	 */
	public function dither($method)
	{
		return $this->addOpt('-dither', $method );
	}


	/**
	 * annotate the image with a graphic primitive
	 * @param $string
	 */
	public function draw($string)
	{
		return $this->addOpt('-draw', $string );
	}


	/**
	 * text encoding type
	 * @param $type
	 */
	public function encoding($type)
	{
		return $this->addOpt('-encoding', $type );
	}


	/**
	 * endianness
	 * @param $type
	 */
	public function endian($type)
	{
		return $this->addOpt('-endian', $type );
	}


	/**
	 * extract area from image
	 * @param $geometry
	 */
	public function extract($geometry)
	{
		return $this->addOpt('-extract', $geometry );
	}


	/**
	 * color to use when filling a graphic primitive
	 * @param $color
	 */
	public function fill($color)
	{
		return $this->addOpt('-fill', $color );
	}


	/**
	 * use this filter when resizing an image
	 * @param $type
	 */
	public function filter($type)
	{
		return $this->addOpt('-filter', $type );
	}


	/**
	 * render text with this font
	 * @param $name
	 */
	public function font($name)
	{
		return $this->addOpt('-font', $name );
	}


	public function format()
	{
		return $this->addOpt('-format');
	}


	/**
	 * level of gamma correction
	 * @param $value
	 */
	public function gamma($value)
	{
		return $this->addOpt('-gamma', $value );
	}


	/**
	 * preferred tile and border sizes
	 * @param $geometry
	 */
	public function geometry($geometry)
	{
		return $this->addOpt('-geometry', $geometry );
	}


	/**
	 * which direction to gravitate towards
	 * @param $direction
	 */
	public function gravity($direction)
	{
		return $this->addOpt('-gravity', $direction );
	}


	/**
	 * chromaticity green primary point
	 * @param $point
	 */
	public function greenPrimary($point)
	{
		return $this->addOpt('-green-primary', $point );
	}


	/**
	 * identify the format and characteristics of the image
	 */
	public function identify()
	{
		return $this->addOpt('-identify');
	}


	/**
	 * type of image interlacing scheme
	 * @param $type
	 */
	public function interlace($type)
	{
		return $this->addOpt('-interlace', $type );
	}


	/**
	 * pixel color interpolation method
	 * @param $method
	 */
	public function interpolate($method)
	{
		return $this->addOpt('-interpolate', $method );
	}


	/**
	 * set the space between two letters
	 * @param $value
	 */
	public function kerning($value)
	{
		return $this->addOpt('-kerning', $value );
	}


	/**
	 * assign a label to an image
	 * @param $string
	 */
	public function label($string)
	{
		return $this->addOpt('-label', $string );
	}


	/**
	 * value    pixel cache resource limit
	 * @param $type
	 */
	public function limit($type)
	{
		return $this->addOpt('-limit', $type );
	}


	/**
	 * store matte channel if the image has one
	 */
	public function matte()
	{
		return $this->addOpt('-matte');
	}


	/**
	 * frame color
	 * @param $color
	 */
	public function mattecolor($color)
	{
		return $this->addOpt('-mattecolor', $color );
	}


	/**
	 * framing style
	 * @param $type
	 */
	public function mode($type)
	{
		return $this->addOpt('-mode', $type );
	}


	/**
	 * monitor progress
	 */
	public function monitor()
	{
		return $this->addOpt('-monitor');
	}


	/**
	 * image origin
	 * @param $geometry
	 */
	public function origin($geometry)
	{
		return $this->addOpt('-origin', $geometry );
	}


	/**
	 * size and location of an image canvas
	 * @param $geometry
	 */
	public function page($geometry)
	{
		return $this->addOpt('-page', $geometry );
	}


	/**
	 * font point size
	 * @param $value
	 */
	public function pointsize($value)
	{
		return $this->addOpt('-pointsize', $value );
	}


	/**
	 * add
	 * @param $filename
	 */
	public function profile($filename)
	{
		return $this->addOpt('-profile', $filename );
	}


	/**
	 * JPEG
	 * @param $value
	 */
	public function quality($value)
	{
		return $this->addOpt('-quality', $value );
	}


	/**
	 * reduce colors in this colorspace
	 * @param $colorspace
	 */
	public function quantize($colorspace)
	{
		return $this->addOpt('-quantize', $colorspace );
	}


	/**
	 * suppress all warning messages
	 */
	public function quiet()
	{
		return $this->addOpt('-quiet');
	}


	/**
	 * chromaticity red primary point
	 * @param $point
	 */
	public function redPrimary($point)
	{
		return $this->addOpt('-red-primary', $point );
	}


	/**
	 * pay attention to warning messages
	 */
	public function regardWarnings()
	{
		return $this->addOpt('-regard-warnings');
	}


	/**
	 * size and location of an image canvas
	 * @param $geometry
	 */
	public function repage($geometry)
	{
		return $this->addOpt('-repage', $geometry );
	}


	/**
	 * remain in effect until parenthesis boundary
	 * @param $settings
	 */
	public function respectParentheses($settings)
	{
		return $this->addOpt('-respect-parentheses', $settings );
	}


	/**
	 * horizontal and vertical sampling factor
	 * @param $geometry
	 */
	public function samplingFactor($geometry)
	{
		return $this->addOpt('-sampling-factor', $geometry );
	}


	/**
	 * image scene range
	 * @param $range
	 */
	public function scenes($range)
	{
		return $this->addOpt('-scenes', $range );
	}


	/**
	 * seed a new sequence of pseudo-random numbers
	 * @param $value
	 */
	public function seed($value)
	{
		return $this->addOpt('-seed', $value );
	}


	/**
	 * value set an image attribute
	 * @param $attribute
	 */
	public function set($attribute)
	{
		return $this->addOpt('-set', $attribute );
	}


	/**
	 * add a shadow beneath a tile to simulate depth
	 */
	public function shadow()
	{
		return $this->addOpt('-shadow');
	}


	/**
	 * width and height of image
	 * @param $geometry
	 */
	public function size($geometry)
	{
		return $this->addOpt('-size', $geometry );
	}


	/**
	 * color to use when stroking a graphic primitive
	 * @param $color
	 */
	public function stroke($color)
	{
		return $this->addOpt('-stroke', $color );
	}


	/**
	 * resize support
	 * @param $factor
	 */
	public function support($factor)
	{
		return $this->addOpt('-support', $factor );
	}


	/**
	 * synchronize image to storage device
	 */
	public function synchronize()
	{
		return $this->addOpt('-synchronize');
	}


	/**
	 * declare the image as modified
	 */
	public function taint()
	{
		return $this->addOpt('-taint');
	}


	/**
	 * name of texture to tile onto the image background
	 * @param $filename
	 */
	public function texture($filename)
	{
		return $this->addOpt('-texture', $filename );
	}


	/**
	 * create a thumbnail of the image
	 * @param $geometry
	 */
	public function thumbnail($geometry)
	{
		return $this->addOpt('-thumbnail', $geometry );
	}


	/**
	 * number of tiles per row and column
	 * @param $geometry
	 */
	public function tile($geometry)
	{
		return $this->addOpt('-tile', $geometry );
	}


	/**
	 * decorate the montage image with a title
	 * @param $string
	 */
	public function title($string)
	{
		return $this->addOpt('-title', $string );
	}


	/**
	 * transparent color
	 * @param $color
	 */
	public function transparentColor($color)
	{
		return $this->addOpt('-transparent-color', $color );
	}


	/**
	 * color tree depth
	 * @param $value
	 */
	public function treedepth($value)
	{
		return $this->addOpt('-treedepth', $value );
	}


	/**
	 * trim image edges
	 */
	public function trim()
	{
		return $this->addOpt('-trim');
	}


	/**
	 * the units of image resolution
	 * @param $type
	 */
	public function units($type)
	{
		return $this->addOpt('-units', $type );
	}


	/**
	 * print detailed information about the image
	 */
	public function verbose()
	{
		return $this->addOpt('-verbose');
	}


	/**
	 * virtual pixel access method
	 * @param $method
	 */
	public function virtualPixel($method)
	{
		return $this->addOpt('-virtual-pixel', $method );
	}


	/**
	 * chromaticity white point
	 * @param $point
	 */
	public function whitePoint($point)
	{
		return $this->addOpt('-white-point', $point );
	}


	/**
	 * adaptively sharpen pixels
	 * @param $geometry
	 */
	public function adaptiveSharpen($geometry)
	{
		return $this->addOpt('-adaptive-sharpen', $geometry );
	}


	/**
	 * text annotate the image with text
	 * @param $geometry
	 */
	public function annotate($geometry)
	{
		return $this->addOpt('-annotate', $geometry );
	}


	/**
	 * automagically orient image
	 */
	public function autoOrient()
	{
		return $this->addOpt('-auto-orient');
	}


	/**
	 * reduce image noise and reduce detail levels
	 * @param $geometry
	 */
	public function blur($geometry)
	{
		return $this->addOpt('-blur', $geometry );
	}


	/**
	 * surround image with a border of color
	 * @param $geometry
	 */
	public function border($geometry)
	{
		return $this->addOpt('-border', $geometry );
	}


	/**
	 * preferred size and location of the cropped image
	 * @param $geometry
	 */
	public function crop($geometry)
	{
		return $this->addOpt('-crop', $geometry );
	}


	/**
	 * set the image size
	 * @param $geometry
	 */
	public function extent($geometry)
	{
		return $this->addOpt('-extent', $geometry );
	}


	/**
	 * flatten a sequence of images
	 */
	public function flatten()
	{
		return $this->addOpt('-flatten');
	}


	/**
	 * flip image in the vertical direction
	 */
	public function flip()
	{
		return $this->addOpt('-flip');
	}


	/**
	 * flop image in the horizontal direction
	 */
	public function flop()
	{
		return $this->addOpt('-flop');
	}


	/**
	 * surround image with an ornamental border
	 * @param $geometry
	 */
	public function frame($geometry)
	{
		return $this->addOpt('-frame', $geometry );
	}


	/**
	 * transform image to black and white
	 */
	public function monochrome()
	{
		return $this->addOpt('-monochrome');
	}


	/**
	 * simulate a Polaroid picture
	 * @param $angle
	 */
	public function polaroid($angle)
	{
		return $this->addOpt('-polaroid', $angle );
	}


	/**
	 * resize the image
	 * @param $geometry
	 */
	public function resize($geometry)
	{
		return $this->addOpt('-resize', $geometry );
	}


	/**
	 * apply Paeth rotation to the image
	 * @param $degrees
	 */
	public function rotate($degrees)
	{
		return $this->addOpt('-rotate', $degrees );
	}


	/**
	 * scale the image
	 * @param $geometry
	 */
	public function scale($geometry)
	{
		return $this->addOpt('-scale', $geometry );
	}


	/**
	 * strip image of all profiles and comments
	 */
	public function strip()
	{
		return $this->addOpt('-strip');
	}


	/**
	 * affine transform image
	 */
	public function transform()
	{
		return $this->addOpt('-transform');
	}


	/**
	 * flip image vertically and rotate
	 */
	public function transpose()
	{
		return $this->addOpt('-transpose');
	}


	/**
	 * make this color transparent within the image
	 * @param $color
	 */
	public function transparent($color)
	{
		return $this->addOpt('-transparent', $color );
	}


	/**
	 * image type
	 * @param $type
	 */
	public function type($type)
	{
		return $this->addOpt('-type', $type );
	}


	/**
	 * sharpen the image
	 * @param $geometry
	 */
	public function unsharp($geometry)
	{
		return $this->addOpt('-unsharp', $geometry );
	}


	/**
	 * merge a sequence of images
	 */
	public function coalesce()
	{
		return $this->addOpt('-coalesce');
	}


	/**
	 * composite image
	 */
	public function composite()
	{
		return $this->addOpt('-composite');
	}


	/**
	 * clone an image
	 * @param $indexes
	 */
	public function clone($indexes)
	{
		return $this->addOpt('-clone', $indexes );
	}


	/**
	 * delete the image from the image sequence
	 * @param $indexes
	 */
	public function delete($indexes)
	{
		return $this->addOpt('-delete', $indexes );
	}


	/**
	 * @param $count
	 */
	public function duplicate($count)
	{
		return $this->addOpt('-duplicate', $count );
	}


	/**
	 * insert last image into the image sequence
	 * @param $index
	 */
	public function insert($index)
	{
		return $this->addOpt('-insert', $index );
	}


	/**
	 * reverse image sequence
	 */
	public function reverse()
	{
		return $this->addOpt('-reverse');
	}


	/**
	 * swap two images in the image sequence
	 * @param $indexes
	 */
	public function swap($indexes)
	{
		return $this->addOpt('-swap', $indexes );
	}


	/**
	 * display copious debugging information
	 * @param $events
	 */
	public function debug($events)
	{
		return $this->addOpt('-debug', $events );
	}


	/**
	 * print program options
	 */
	public function help()
	{
		return $this->addOpt('-help');
	}


	/**
	 * print a list of supported option arguments
	 * @param $type
	 */
	public function list($type)
	{
		return $this->addOpt('-list', $type );
	}


	/**
	 * format of debugging information
	 * @param $format
	 */
	public function log($format)
	{
		return $this->addOpt('-log', $format );
	}


	/**
	 * print version information
	 */
	public function version()
	{
		return $this->addOpt('-version');
	}
}
