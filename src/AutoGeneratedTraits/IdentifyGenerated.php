<?php

namespace SystemUtil\AutoGeneratedTraits;

/**
 * Auto generated From command help
 */
trait IdentifyGenerated
{
	/**
	 * on
	 * @param $option
	 */
	public function alpha($option)
	{
		return $this->addOpt('-alpha', $option );
	}


	/**
	 * remove pixel-aliasing
	 */
	public function antialias()
	{
		return $this->addOpt('-antialias');
	}


	/**
	 * decipher image with this password
	 * @param $password
	 */
	public function authenticate($password)
	{
		return $this->addOpt('-authenticate', $password );
	}


	/**
	 * apply option to select image channels
	 * @param $type
	 */
	public function channel($type)
	{
		return $this->addOpt('-channel', $type );
	}


	/**
	 * clip along the first path from the
	 */
	public function clip()
	{
		return $this->addOpt('-clip');
	}


	/**
	 * associate a clip mask with the image
	 * @param $filename
	 */
	public function clipMask($filename)
	{
		return $this->addOpt('-clip-mask', $filename );
	}


	/**
	 * clip along a named path from the
	 * @param $id
	 */
	public function clipPath($id)
	{
		return $this->addOpt('-clip-path', $id );
	}


	/**
	 * alternate image colorspace
	 * @param $type
	 */
	public function colorspace($type)
	{
		return $this->addOpt('-colorspace', $type );
	}


	/**
	 * cut out a rectangular region of the image
	 * @param $geometry
	 */
	public function crop($geometry)
	{
		return $this->addOpt('-crop', $geometry );
	}


	/**
	 * @param $format
	 */
	public function define($format)
	{
		return $this->addOpt('-define', $format );
	}


	/**
	 * horizontal and vertical density of the image
	 * @param $geometry
	 */
	public function density($geometry)
	{
		return $this->addOpt('-density', $geometry );
	}


	/**
	 * image depth
	 * @param $value
	 */
	public function depth($value)
	{
		return $this->addOpt('-depth', $value );
	}


	/**
	 * endianness
	 * @param $type
	 */
	public function endian($type)
	{
		return $this->addOpt('-endian', $type );
	}


	/**
	 * extract area from image
	 * @param $geometry
	 */
	public function extract($geometry)
	{
		return $this->addOpt('-extract', $geometry );
	}


	/**
	 * analyze image features
	 * @param $distance
	 */
	public function features($distance)
	{
		return $this->addOpt('-features', $distance );
	}


	public function format()
	{
		return $this->addOpt('-format');
	}


	/**
	 * colors within this distance are considered equal
	 * @param $distance
	 */
	public function fuzz($distance)
	{
		return $this->addOpt('-fuzz', $distance );
	}


	/**
	 * of gamma correction
	 * @param $value
	 */
	public function gamma($value)
	{
		return $this->addOpt('-gamma', $value );
	}


	/**
	 * type of image interlacing scheme
	 * @param $type
	 */
	public function interlace($type)
	{
		return $this->addOpt('-interlace', $type );
	}


	/**
	 * pixel color interpolation method
	 * @param $method
	 */
	public function interpolate($method)
	{
		return $this->addOpt('-interpolate', $method );
	}


	/**
	 * value    pixel cache resource limit
	 * @param $type
	 */
	public function limit($type)
	{
		return $this->addOpt('-limit', $type );
	}


	/**
	 * print a list of supported option arguments
	 * @param $type
	 */
	public function list($type)
	{
		return $this->addOpt('-list', $type );
	}


	/**
	 * associate a mask with the image
	 * @param $filename
	 */
	public function mask($filename)
	{
		return $this->addOpt('-mask', $filename );
	}


	/**
	 * store matte channel if the image has one
	 */
	public function matte()
	{
		return $this->addOpt('-matte');
	}


	/**
	 * report image moments
	 */
	public function moments()
	{
		return $this->addOpt('-moments');
	}


	/**
	 * monitor progress
	 */
	public function monitor()
	{
		return $this->addOpt('-monitor');
	}


	/**
	 * efficiently determine image attributes
	 */
	public function ping()
	{
		return $this->addOpt('-ping');
	}


	/**
	 * maximum number of significant digits to print
	 * @param $value
	 */
	public function precision($value)
	{
		return $this->addOpt('-precision', $value );
	}


	/**
	 * suppress all warning messages
	 */
	public function quiet()
	{
		return $this->addOpt('-quiet');
	}


	/**
	 * pay attention to warning messages
	 */
	public function regardWarnings()
	{
		return $this->addOpt('-regard-warnings');
	}


	/**
	 * remain in effect until parenthesis boundary
	 * @param $settings
	 */
	public function respectParentheses($settings)
	{
		return $this->addOpt('-respect-parentheses', $settings );
	}


	/**
	 * horizontal and vertical sampling factor
	 * @param $geometry
	 */
	public function samplingFactor($geometry)
	{
		return $this->addOpt('-sampling-factor', $geometry );
	}


	/**
	 * seed a new sequence of pseudo-random numbers
	 * @param $value
	 */
	public function seed($value)
	{
		return $this->addOpt('-seed', $value );
	}


	/**
	 * value set an image attribute
	 * @param $attribute
	 */
	public function set($attribute)
	{
		return $this->addOpt('-set', $attribute );
	}


	/**
	 * width and height of image
	 * @param $geometry
	 */
	public function size($geometry)
	{
		return $this->addOpt('-size', $geometry );
	}


	/**
	 * strip image of all profiles and comments
	 */
	public function strip()
	{
		return $this->addOpt('-strip');
	}


	/**
	 * display the number of unique colors in the image
	 */
	public function unique()
	{
		return $this->addOpt('-unique');
	}


	/**
	 * the units of image resolution
	 * @param $type
	 */
	public function units($type)
	{
		return $this->addOpt('-units', $type );
	}


	/**
	 * print detailed information about the image
	 */
	public function verbose()
	{
		return $this->addOpt('-verbose');
	}


	/**
	 * virtual pixel access method
	 * @param $method
	 */
	public function virtualPixel($method)
	{
		return $this->addOpt('-virtual-pixel', $method );
	}


	/**
	 * convert image to grayscale
	 * @param $method
	 */
	public function grayscale($method)
	{
		return $this->addOpt('-grayscale', $method );
	}


	/**
	 * replace every pixel with its complementary color
	 */
	public function negate()
	{
		return $this->addOpt('-negate');
	}


	/**
	 * display copious debugging information
	 * @param $events
	 */
	public function debug($events)
	{
		return $this->addOpt('-debug', $events );
	}


	/**
	 * print program options
	 */
	public function help()
	{
		return $this->addOpt('-help');
	}


	/**
	 * format of debugging information
	 * @param $format
	 */
	public function log($format)
	{
		return $this->addOpt('-log', $format );
	}


	/**
	 * print version information
	 */
	public function version()
	{
		return $this->addOpt('-version');
	}
}
